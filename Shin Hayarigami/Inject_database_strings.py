import glob
import os
import json
import sys
import numpy

new_files = glob.glob("strings\*.json")

if (len(new_files) == 0):
    print("No files detected! Be sure to unpack strings from database.dat!")
    sys.exit()

os.makedirs("new_strings_dat", exist_ok=True)

for i in range(0, len(new_files)):
    file = open(new_files[i], "r", encoding="UTF-8")
    DUMP = json.load(file)
    file.close()
    match(new_files[i]):
        case "strings\\characterdatabase.json":
            new_file = open("new_strings_dat\\characterdatabase.dat", "wb")
            new_file.write(numpy.uint32(len(DUMP)))
            new_file.write(numpy.uint32(0x10))
            new_file.write(numpy.uint32(0x20 + (0x10 * len(DUMP))))
            new_file.write(numpy.uint32(0x20))
            new_file.write(numpy.uint64(0))
            new_file.write(numpy.uint64(1))
            keys = list(DUMP.keys())
            strings_block = []
            for x in range(0, len(keys)):
                new_file.write(numpy.uint64(int(keys[x], base=10)))
                new_file.write(numpy.uint64(len(b"".join(strings_block))))
                strings_block.append(DUMP[keys[x]].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
            new_file.write(b"".join(strings_block))
            new_file.close()
        case "strings\\extracg.json":
            new_file = open("new_strings_dat\\extracg.dat", "wb")
            old_file = open("database.dat\\extracg.dat", "rb")
            new_file.write(numpy.uint32(len(DUMP)))
            new_file.write(numpy.uint32(0x20))
            new_file.write(numpy.uint32(0x30 + (0x20 * len(DUMP))))
            new_file.write(numpy.uint32(0x30))
            new_file.write(numpy.uint64(0))
            new_file.write(numpy.uint64(0))
            new_file.write(numpy.uint64(1))
            new_file.write(numpy.uint64(0))
            keys = list(DUMP.keys())
            strings_block = []
            for x in range(0, len(keys)):
                new_file.write(numpy.uint32(int(keys[x], base=10)))
                old_file.seek(new_file.tell())
                new_file.write(old_file.read(0xC))
                new_file.write(numpy.uint32(len(b"".join(strings_block))))
                old_file.seek(4, 1)
                new_file.write(old_file.read(0xC))
                strings_block.append(DUMP[keys[x]].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
            old_file.close()
            new_file.write(b"".join(strings_block))
            new_file.close()
        case "strings\\extraendinglist.json":
            new_file = open("new_strings_dat\\extraendinglist.dat", "wb")
            old_file = open("database.dat\\extraendinglist.dat", "rb")
            new_file.write(numpy.uint32(len(DUMP)))
            new_file.write(numpy.uint32(0x60))
            new_file.write(numpy.uint32(0x70 + (0x60 * len(DUMP))))
            new_file.write(numpy.uint32(0x70))
            old_file.seek(0x10)
            new_file.write(old_file.read(0x60))
            keys = list(DUMP.keys())
            strings_block = []
            for x in range(0, len(keys)):
                new_file.write(numpy.uint32(int(keys[x], base=10)))
                old_file.seek(new_file.tell())
                new_file.write(old_file.read(0xC))
                new_file.write(numpy.uint32(len(b"".join(strings_block))))
                old_file.seek(4, 1)
                new_file.write(old_file.read(0xC))
                strings_block.append(DUMP[keys[x]]["String1"].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
                new_file.write(numpy.uint64(len(b"".join(strings_block))))
                strings_block.append(DUMP[keys[x]]["String2"].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
                new_file.write(numpy.uint64(len(b"".join(strings_block))))
                strings_block.append(DUMP[keys[x]]["String3"].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
                new_file.write(numpy.uint64(len(b"".join(strings_block))))
                strings_block.append(DUMP[keys[x]]["String4"].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
                new_file.write(numpy.uint64(len(b"".join(strings_block))))
                strings_block.append(DUMP[keys[x]]["String5"].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
                new_file.write(numpy.uint64(len(b"".join(strings_block))))
                strings_block.append(DUMP[keys[x]]["String6"].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
                new_file.write(numpy.uint64(len(b"".join(strings_block))))
                strings_block.append(DUMP[keys[x]]["String7"].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
                new_file.write(numpy.uint64(len(b"".join(strings_block))))
                strings_block.append(DUMP[keys[x]]["String8"].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
                new_file.write(numpy.uint64(len(b"".join(strings_block))))
                strings_block.append(DUMP[keys[x]]["String9"].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
            old_file.close()
            new_file.write(b"".join(strings_block))
            new_file.close()
        case "strings\\extrasidestory.json":
            new_file = open("new_strings_dat\\extrasidestory.dat", "wb")
            old_file = open("database.dat\\extrasidestory.dat", "rb")
            new_file.write(numpy.uint32(len(DUMP)))
            new_file.write(numpy.uint32(0x28))
            new_file.write(numpy.uint32(0x40 + (0x28 * len(DUMP))))
            new_file.write(numpy.uint32(0x40))
            old_file.seek(0x10)
            new_file.write(old_file.read(0x30))
            keys = list(DUMP.keys())
            strings_block = []
            for x in range(0, len(keys)):
                new_file.write(numpy.uint32(int(keys[x], base=10)))
                old_file.seek(new_file.tell())
                new_file.write(old_file.read(0x4))
                new_file.write(numpy.uint32(len(b"".join(strings_block))))
                old_file.seek(4, 1)
                new_file.write(old_file.read(0x1C))
                strings_block.append(DUMP[keys[x]].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
            old_file.close()
            new_file.write(b"".join(strings_block))
            new_file.close()
        case "strings\\flagdatabase.json":
            new_file = open("new_strings_dat\\flagdatabase.dat", "wb")
            old_file = open("database.dat\\flagdatabase.dat", "rb")
            new_file.write(numpy.uint32(len(DUMP)))
            new_file.write(numpy.uint32(0x10))
            new_file.write(numpy.uint32(0x20 + (0x10 * len(DUMP))))
            new_file.write(numpy.uint32(0x20))
            old_file.seek(0x10)
            new_file.write(old_file.read(0x10))
            strings_block = []
            for x in range(0, len(DUMP)):
                try:
                    new_file.write(numpy.uint32(DUMP[x]["ID"]))
                except:
                    new_file.write(numpy.uint32(DUMP[x]["START_ID"]))
                    new_file.write(numpy.uint32(DUMP[x]["END_ID"]))
                else:
                    new_file.write(numpy.uint32(0))
                new_file.write(numpy.uint64(len(b"".join(strings_block))))
                strings_block.append(DUMP[x]["STRING"].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
            old_file.close()
            new_file.write(b"".join(strings_block))
            new_file.close()
        case "strings\\foafdatabase.json":
            new_file = open("new_strings_dat\\foafdatabase.dat", "wb")
            old_file = open("database.dat\\foafdatabase.dat", "rb")
            new_file.write(numpy.uint32(len(DUMP)))
            new_file.write(numpy.uint32(0x20))
            new_file.write(numpy.uint32(0x30 + (0x20 * len(DUMP))))
            new_file.write(numpy.uint32(0x30))
            old_file.seek(0x10)
            new_file.write(old_file.read(0x20))
            keys = list(DUMP.keys())
            strings_block = []
            for x in range(0, len(keys)):
                new_file.write(numpy.uint32(int(keys[x], base=10)))
                old_file.seek(new_file.tell())
                new_file.write(old_file.read(0xC))
                new_file.write(numpy.uint32(len(b"".join(strings_block))))
                old_file.seek(4, 1)
                new_file.write(old_file.read(0xC))
                strings_block.append(DUMP[keys[x]].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
            old_file.close()
            new_file.write(b"".join(strings_block))
            new_file.close()
        case "strings\\foafdatabasetext.json":
            new_file = open("new_strings_dat\\foafdatabasetext.dat", "wb")
            old_file = open("database.dat\\foafdatabasetext.dat", "rb")
            new_file.write(numpy.uint32(len(DUMP)))
            new_file.write(numpy.uint32(0x18))
            new_file.write(numpy.uint32(0x8 + 0x30 + (0x18 * len(DUMP))))
            new_file.write(numpy.uint32(0x30))
            old_file.seek(0x10)
            new_file.write(old_file.read(0x20))
            keys = list(DUMP.keys())
            strings_block = []
            for x in range(0, len(keys)):
                new_file.write(numpy.uint32(int(keys[x], base=10)))
                old_file.seek(new_file.tell())
                new_file.write(old_file.read(0xC))
                new_file.write(numpy.uint32(len(b"".join(strings_block))))
                old_file.seek(4, 1)
                new_file.write(old_file.read(0x4))
                strings_block.append(DUMP[keys[x]].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
            new_file.write(numpy.uint64(0))
            old_file.close()
            new_file.write(b"".join(strings_block))
            new_file.close()
        case "strings\\gamestring.json":
            new_file = open("new_strings_dat\\gamestring.dat", "wb")
            new_file.write(numpy.uint32(len(DUMP)))
            new_file.write(numpy.uint32(0x10))
            new_file.write(numpy.uint32(0x20 + (0x10 * len(DUMP))))
            new_file.write(numpy.uint32(0x20))
            new_file.write(numpy.uint64(0))
            new_file.write(numpy.uint64(1))
            keys = list(DUMP.keys())
            strings_block = []
            for x in range(0, len(keys)):
                new_file.write(numpy.uint64(int(keys[x], base=10)))
                new_file.write(numpy.uint64(len(b"".join(strings_block))))
                strings_block.append(DUMP[keys[x]].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
            new_file.write(b"".join(strings_block))
            new_file.close()
        case "strings\\keyword.json":
            new_file = open("new_strings_dat\\keyword.dat", "wb")
            old_file = open("database.dat\\keyword.dat", "rb")
            new_file.write(numpy.uint32(len(DUMP)))
            new_file.write(numpy.uint32(0x30))
            new_file.write(numpy.uint32(0x40 + (0x30 * len(DUMP))))
            new_file.write(numpy.uint32(0x40))
            old_file.seek(0x10)
            new_file.write(old_file.read(0x30))
            keys = list(DUMP.keys())
            strings_block = []
            for x in range(0, len(keys)):
                new_file.write(numpy.uint64(int(keys[x], base=10)))
                new_file.write(numpy.uint64(len(b"".join(strings_block))))
                old_file.seek(new_file.tell())
                new_file.write(old_file.read(0x8))
                strings_block.append(DUMP[keys[x]].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
                new_file.write(numpy.uint64(len(b"".join(strings_block))))
                strings_block.append(numpy.uint32(0))
                new_file.write(numpy.uint64(len(b"".join(strings_block))))
                strings_block.append(numpy.uint32(0))
                new_file.write(numpy.uint64(0))
            old_file.close()
            new_file.write(b"".join(strings_block))
            new_file.close()
        case "strings\\liarsart.json":
            new_file = open("new_strings_dat\\liarsart.dat", "wb")
            old_file = open("database.dat\\liarsart.dat", "rb")
            new_file.write(numpy.uint32(len(DUMP)))
            new_file.write(numpy.uint32(0x30))
            new_file.write(numpy.uint32(0x40 + (0x30 * len(DUMP))))
            new_file.write(numpy.uint32(0x40))
            old_file.seek(0x10)
            new_file.write(old_file.read(0x30))
            keys = list(DUMP.keys())
            strings_block = []
            for x in range(0, len(keys)):
                new_file.write(numpy.uint32(int(keys[x], base=10)))
                old_file.seek(new_file.tell())
                new_file.write(old_file.read(0xC))
                new_file.write(numpy.uint32(len(b"".join(strings_block))))
                old_file.seek(new_file.tell())
                new_file.write(old_file.read(0x1C))
                strings_block.append(DUMP[keys[x]].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
            old_file.close()
            new_file.write(b"".join(strings_block))
            new_file.close()
        case "strings\\paramdatabase.json":
            new_file = open("new_strings_dat\\paramdatabase.dat", "wb")
            new_file.write(numpy.uint32(len(DUMP)))
            new_file.write(numpy.uint32(0x10))
            new_file.write(numpy.uint32(0x20 + (0x10 * len(DUMP))))
            new_file.write(numpy.uint32(0x20))
            new_file.write(numpy.uint64(0))
            new_file.write(numpy.uint64(1))
            keys = list(DUMP.keys())
            strings_block = []
            for x in range(0, len(keys)):
                new_file.write(numpy.uint64(int(keys[x], base=10)))
                new_file.write(numpy.uint64(len(b"".join(strings_block))))
                strings_block.append(DUMP[keys[x]].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
            new_file.write(b"".join(strings_block))
            new_file.close()
        case "strings\\selecter.json":
            new_file = open("new_strings_dat\\selecter.dat", "wb")
            old_file = open("database.dat\\selecter.dat", "rb")
            new_file.write(numpy.uint32(len(DUMP)))
            new_file.write(numpy.uint32(0x38))
            new_file.write(numpy.uint32(0x8 + 0x50 + (0x38 * len(DUMP))))
            new_file.write(numpy.uint32(0x50))
            old_file.seek(0x10)
            new_file.write(old_file.read(0x40))
            keys = list(DUMP.keys())
            strings_block = []
            for x in range(0, len(keys)):
                new_file.write(numpy.uint32(int(keys[x], base=10)))
                old_file.seek(new_file.tell())
                new_file.write(old_file.read(0x4))
                new_file.write(numpy.uint32(len(b"".join(strings_block))))
                old_file.seek(new_file.tell())
                new_file.write(old_file.read(0x2C))
                strings_block.append(DUMP[keys[x]].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
            new_file.write(numpy.uint64(0))
            old_file.close()
            new_file.write(b"".join(strings_block))
            new_file.close()
        case "strings\\selectinfo.json":
            new_file = open("new_strings_dat\\selectinfo.dat", "wb")
            old_file = open("database.dat\\selectinfo.dat", "rb")
            new_file.write(numpy.uint32(len(DUMP)))
            new_file.write(numpy.uint32(0x28))
            new_file.write(numpy.uint32(0x8 + 0x40 + (0x28 * len(DUMP))))
            new_file.write(numpy.uint32(0x40))
            old_file.seek(0x10)
            new_file.write(old_file.read(0x30))
            keys = list(DUMP.keys())
            strings_block = []
            for x in range(0, len(keys)):
                new_file.write(numpy.uint32(int(keys[x], base=10)))
                old_file.seek(new_file.tell())
                new_file.write(old_file.read(0xC))
                new_file.write(numpy.uint32(len(b"".join(strings_block))))
                old_file.seek(new_file.tell())
                new_file.write(old_file.read(0x14))
                strings_block.append(DUMP[keys[x]].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
            new_file.write(numpy.uint64(0))
            old_file.close()
            new_file.write(b"".join(strings_block))
            new_file.close()
        case "strings\\soundbgm.json":
            new_file = open("new_strings_dat\\soundbgm.dat", "wb")
            old_file = open("database.dat\\soundbgm.dat", "rb")
            new_file.write(numpy.uint32(len(DUMP)))
            new_file.write(numpy.uint32(0x40))
            new_file.write(numpy.uint32(0x50 + (0x40 * len(DUMP))))
            new_file.write(numpy.uint32(0x50))
            old_file.seek(0x10)
            new_file.write(old_file.read(0x40))
            keys = list(DUMP.keys())
            strings_block = []
            for x in range(0, len(keys)):
                new_file.write(numpy.uint32(int(keys[x], base=10)))
                old_file.seek(new_file.tell())
                new_file.write(old_file.read(0xC))
                new_file.write(numpy.uint32(len(b"".join(strings_block))))
                old_file.seek(new_file.tell())
                new_file.write(old_file.read(0xC))
                strings_block.append(DUMP[keys[x]]["Type"].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
                new_file.write(numpy.uint64(len(b"".join(strings_block))))
                strings_block.append(DUMP[keys[x]]["String1"].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
                new_file.write(numpy.uint64(len(b"".join(strings_block))))
                strings_block.append(DUMP[keys[x]]["String2"].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
                new_file.write(numpy.uint64(len(b"".join(strings_block))))
                strings_block.append(DUMP[keys[x]]["String3"].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
                new_file.write(numpy.uint64(len(b"".join(strings_block))))
                strings_block.append(DUMP[keys[x]]["String4"].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
            old_file.close()
            new_file.write(b"".join(strings_block))
            new_file.close()
        case "strings\\soundse.json":
            new_file = open("new_strings_dat\\soundse.dat", "wb")
            old_file = open("database.dat\\soundse.dat", "rb")
            new_file.write(numpy.uint32(len(DUMP)))
            new_file.write(numpy.uint32(0x40))
            new_file.write(numpy.uint32(0x50 + (0x40 * len(DUMP))))
            new_file.write(numpy.uint32(0x50))
            old_file.seek(0x10)
            new_file.write(old_file.read(0x40))
            keys = list(DUMP.keys())
            strings_block = []
            for x in range(0, len(keys)):
                new_file.write(numpy.uint32(int(keys[x], base=10)))
                old_file.seek(new_file.tell())
                new_file.write(old_file.read(0xC))
                new_file.write(numpy.uint32(len(b"".join(strings_block))))
                old_file.seek(new_file.tell())
                new_file.write(old_file.read(0xC))
                strings_block.append(DUMP[keys[x]]["Type"].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
                new_file.write(numpy.uint64(len(b"".join(strings_block))))
                strings_block.append(DUMP[keys[x]]["String1"].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
                new_file.write(numpy.uint64(len(b"".join(strings_block))))
                strings_block.append(DUMP[keys[x]]["String2"].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
                new_file.write(numpy.uint64(len(b"".join(strings_block))))
                strings_block.append(DUMP[keys[x]]["String3"].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
                new_file.write(numpy.uint64(len(b"".join(strings_block))))
                strings_block.append(DUMP[keys[x]]["String4"].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
            old_file.close()
            new_file.write(b"".join(strings_block))
            new_file.close()