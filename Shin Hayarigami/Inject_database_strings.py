import glob
import os
import json
import sys
import numpy
import shutil

new_files = glob.glob("strings\*.json")

exceptions = ["database\\common_story.dat", "database\\common_story.did", "database\\story.dat", "database\\story.did", "database\\00_logic.dat", "database\\00_tree.dat", "database\\nmlcodelabel.dat", "database\\screenposadvps4.dat", "database\\tipadv.dat", "database\\tiplogic.dat"]


if (len(new_files) == 0):
    print("No files detected! Be sure to unpack strings from database.dat!")
    sys.exit()

os.makedirs("new_database", exist_ok=True)

for i in range(0, len(new_files)):
    file = open(new_files[i], "r", encoding="UTF-8")
    DUMP = json.load(file)
    file.close()
    match(new_files[i]):
        case "strings\\characterdatabase.json":
            new_file = open("new_database\\characterdatabase.dat", "wb")
            new_file.write(numpy.uint32(len(DUMP)))
            new_file.write(numpy.uint32(0x10))
            new_file.write(numpy.uint32(0x20 + (0x10 * len(DUMP))))
            new_file.write(numpy.uint32(0x20))
            new_file.write(numpy.uint64(0))
            new_file.write(numpy.uint64(1))
            keys = list(DUMP.keys())
            strings_block = []
            for x in range(0, len(keys)):
                new_file.write(numpy.uint64(int(keys[x], base=10)))
                new_file.write(numpy.uint64(len(b"".join(strings_block))))
                strings_block.append(DUMP[keys[x]].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
            new_file.write(b"".join(strings_block))
            new_file.close()
        case "strings\\extracg.json":
            new_file = open("new_database\\extracg.dat", "wb")
            old_file = open("database\\extracg.dat", "rb")
            new_file.write(numpy.uint32(len(DUMP)))
            new_file.write(numpy.uint32(0x20))
            new_file.write(numpy.uint32(0x30 + (0x20 * len(DUMP))))
            new_file.write(numpy.uint32(0x30))
            new_file.write(numpy.uint64(0))
            new_file.write(numpy.uint64(0))
            new_file.write(numpy.uint64(1))
            new_file.write(numpy.uint64(0))
            keys = list(DUMP.keys())
            strings_block = []
            for x in range(0, len(keys)):
                new_file.write(numpy.uint32(int(keys[x], base=10)))
                old_file.seek(new_file.tell())
                new_file.write(old_file.read(0xC))
                new_file.write(numpy.uint32(len(b"".join(strings_block))))
                old_file.seek(4, 1)
                new_file.write(old_file.read(0xC))
                strings_block.append(DUMP[keys[x]].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
            old_file.close()
            new_file.write(b"".join(strings_block))
            new_file.close()
        case "strings\\extraendinglist.json":
            new_file = open("new_database\\extraendinglist.dat", "wb")
            old_file = open("database\\extraendinglist.dat", "rb")
            new_file.write(numpy.uint32(len(DUMP)))
            new_file.write(numpy.uint32(0x60))
            new_file.write(numpy.uint32(0x70 + (0x60 * len(DUMP))))
            new_file.write(numpy.uint32(0x70))
            old_file.seek(0x10)
            new_file.write(old_file.read(0x60))
            keys = list(DUMP.keys())
            strings_block = []
            for x in range(0, len(keys)):
                new_file.write(numpy.uint32(int(keys[x], base=10)))
                old_file.seek(new_file.tell())
                new_file.write(old_file.read(0xC))
                new_file.write(numpy.uint32(len(b"".join(strings_block))))
                old_file.seek(4, 1)
                new_file.write(old_file.read(0xC))
                strings_block.append(DUMP[keys[x]]["String1"].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
                new_file.write(numpy.uint64(len(b"".join(strings_block))))
                strings_block.append(DUMP[keys[x]]["String2"].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
                new_file.write(numpy.uint64(len(b"".join(strings_block))))
                strings_block.append(DUMP[keys[x]]["String3"].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
                new_file.write(numpy.uint64(len(b"".join(strings_block))))
                strings_block.append(DUMP[keys[x]]["String4"].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
                new_file.write(numpy.uint64(len(b"".join(strings_block))))
                strings_block.append(DUMP[keys[x]]["String5"].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
                new_file.write(numpy.uint64(len(b"".join(strings_block))))
                strings_block.append(DUMP[keys[x]]["String6"].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
                new_file.write(numpy.uint64(len(b"".join(strings_block))))
                strings_block.append(DUMP[keys[x]]["String7"].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
                new_file.write(numpy.uint64(len(b"".join(strings_block))))
                strings_block.append(DUMP[keys[x]]["String8"].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
                new_file.write(numpy.uint64(len(b"".join(strings_block))))
                strings_block.append(DUMP[keys[x]]["String9"].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
            old_file.close()
            new_file.write(b"".join(strings_block))
            new_file.close()
        case "strings\\extrasidestory.json":
            new_file = open("new_database\\extrasidestory.dat", "wb")
            old_file = open("database\\extrasidestory.dat", "rb")
            new_file.write(numpy.uint32(len(DUMP)))
            new_file.write(numpy.uint32(0x28))
            new_file.write(numpy.uint32(0x40 + (0x28 * len(DUMP))))
            new_file.write(numpy.uint32(0x40))
            old_file.seek(0x10)
            new_file.write(old_file.read(0x30))
            keys = list(DUMP.keys())
            strings_block = []
            for x in range(0, len(keys)):
                new_file.write(numpy.uint32(int(keys[x], base=10)))
                old_file.seek(new_file.tell())
                new_file.write(old_file.read(0x4))
                new_file.write(numpy.uint32(len(b"".join(strings_block))))
                old_file.seek(4, 1)
                new_file.write(old_file.read(0x1C))
                strings_block.append(DUMP[keys[x]].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
            old_file.close()
            new_file.write(b"".join(strings_block))
            new_file.close()
        case "strings\\flagdatabase.json":
            new_file = open("new_database\\flagdatabase.dat", "wb")
            old_file = open("database\\flagdatabase.dat", "rb")
            new_file.write(numpy.uint32(len(DUMP)))
            new_file.write(numpy.uint32(0x10))
            new_file.write(numpy.uint32(0x20 + (0x10 * len(DUMP))))
            new_file.write(numpy.uint32(0x20))
            old_file.seek(0x10)
            new_file.write(old_file.read(0x10))
            strings_block = []
            for x in range(0, len(DUMP)):
                try:
                    new_file.write(numpy.uint32(DUMP[x]["ID"]))
                except:
                    new_file.write(numpy.uint32(DUMP[x]["START_ID"]))
                    new_file.write(numpy.uint32(DUMP[x]["END_ID"]))
                else:
                    new_file.write(numpy.uint32(0))
                new_file.write(numpy.uint64(len(b"".join(strings_block))))
                strings_block.append(DUMP[x]["STRING"].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
            old_file.close()
            new_file.write(b"".join(strings_block))
            new_file.close()
        case "strings\\foafdatabase.json":
            new_file = open("new_database\\foafdatabase.dat", "wb")
            old_file = open("database\\foafdatabase.dat", "rb")
            new_file.write(numpy.uint32(len(DUMP)))
            new_file.write(numpy.uint32(0x20))
            new_file.write(numpy.uint32(0x30 + (0x20 * len(DUMP))))
            new_file.write(numpy.uint32(0x30))
            old_file.seek(0x10)
            new_file.write(old_file.read(0x20))
            keys = list(DUMP.keys())
            strings_block = []
            for x in range(0, len(keys)):
                new_file.write(numpy.uint32(int(keys[x], base=10)))
                old_file.seek(new_file.tell())
                new_file.write(old_file.read(0xC))
                new_file.write(numpy.uint32(len(b"".join(strings_block))))
                old_file.seek(4, 1)
                new_file.write(old_file.read(0xC))
                strings_block.append(DUMP[keys[x]].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
            old_file.close()
            new_file.write(b"".join(strings_block))
            new_file.close()
        case "strings\\foafdatabasetext.json":
            new_file = open("new_database\\foafdatabasetext.dat", "wb")
            old_file = open("database\\foafdatabasetext.dat", "rb")
            keys = list(DUMP.keys())
            entry_count = 0
            for x in range(0, len(keys)):
                entry_count += len(DUMP[keys[x]]["STRINGS"])
            new_file.write(numpy.uint32(entry_count))
            new_file.write(numpy.uint32(0x18))
            new_file.write(numpy.uint32(0))
            new_file.write(numpy.uint32(0x30))
            old_file.seek(0x10)
            new_file.write(old_file.read(0x20))
            old_file.close()
            strings_block = []
            ID = 1
            for x in range(0, len(keys)):
                for z in range(0, len(DUMP[keys[x]]["STRINGS"])):
                    new_file.write(numpy.uint32(ID))
                    ID += 1
                    new_file.write(numpy.uint32(int(keys[x], base=10)))
                    new_file.write(numpy.uint32(z+1))
                    new_file.write(numpy.uint32(0))
                    new_file.write(numpy.uint32(len(b"".join(strings_block))))
                    new_file.write(numpy.uint32(0))
                    strings_block.append(DUMP[keys[x]]["STRINGS"][z].encode("UTF-8"))
                    strings_block.append(numpy.uint32(0))
            if (new_file.tell() % 16 != 0):
                new_file.write(numpy.uint64(0))
            size = new_file.tell()
            new_file.seek(8, 0)
            new_file.write(numpy.uint32(size))
            new_file.seek(0, 2)
            new_file.write(b"".join(strings_block))
            new_file.close()
        case "strings\\gamestring.json":
            new_file = open("new_database\\gamestring.dat", "wb")
            new_file.write(numpy.uint32(len(DUMP)))
            new_file.write(numpy.uint32(0x10))
            new_file.write(numpy.uint32(0x20 + (0x10 * len(DUMP))))
            new_file.write(numpy.uint32(0x20))
            new_file.write(numpy.uint64(0))
            new_file.write(numpy.uint64(1))
            keys = list(DUMP.keys())
            strings_block = []
            for x in range(0, len(keys)):
                new_file.write(numpy.uint64(int(keys[x], base=10)))
                new_file.write(numpy.uint64(len(b"".join(strings_block))))
                strings_block.append(DUMP[keys[x]].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
            new_file.write(b"".join(strings_block))
            new_file.close()
        case "strings\\keyword.json":
            new_file = open("new_database\\keyword.dat", "wb")
            old_file = open("database\\keyword.dat", "rb")
            new_file.write(numpy.uint32(len(DUMP)))
            new_file.write(numpy.uint32(0x30))
            new_file.write(numpy.uint32(0x40 + (0x30 * len(DUMP))))
            new_file.write(numpy.uint32(0x40))
            old_file.seek(0x10)
            new_file.write(old_file.read(0x30))
            keys = list(DUMP.keys())
            strings_block = []
            for x in range(0, len(keys)):
                new_file.write(numpy.uint64(int(keys[x], base=10)))
                new_file.write(numpy.uint64(len(b"".join(strings_block))))
                old_file.seek(new_file.tell())
                new_file.write(old_file.read(0x8))
                strings_block.append(DUMP[keys[x]].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
                new_file.write(numpy.uint64(len(b"".join(strings_block))))
                strings_block.append(numpy.uint32(0))
                new_file.write(numpy.uint64(len(b"".join(strings_block))))
                strings_block.append(numpy.uint32(0))
                new_file.write(numpy.uint64(0))
            old_file.close()
            new_file.write(b"".join(strings_block))
            new_file.close()
        case "strings\\liarsart.json":
            new_file = open("new_database\\liarsart.dat", "wb")
            old_file = open("database\\liarsart.dat", "rb")
            new_file.write(numpy.uint32(len(DUMP)))
            new_file.write(numpy.uint32(0x30))
            new_file.write(numpy.uint32(0x40 + (0x30 * len(DUMP))))
            new_file.write(numpy.uint32(0x40))
            old_file.seek(0x10)
            new_file.write(old_file.read(0x30))
            keys = list(DUMP.keys())
            strings_block = []
            for x in range(0, len(keys)):
                new_file.write(numpy.uint32(int(keys[x], base=10)))
                old_file.seek(new_file.tell())
                new_file.write(old_file.read(0xC))
                new_file.write(numpy.uint32(len(b"".join(strings_block))))
                old_file.seek(new_file.tell())
                new_file.write(old_file.read(0x1C))
                strings_block.append(DUMP[keys[x]].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
            old_file.close()
            new_file.write(b"".join(strings_block))
            new_file.close()
        case "strings\\paramdatabase.json":
            new_file = open("new_database\\paramdatabase.dat", "wb")
            new_file.write(numpy.uint32(len(DUMP)))
            new_file.write(numpy.uint32(0x10))
            new_file.write(numpy.uint32(0x20 + (0x10 * len(DUMP))))
            new_file.write(numpy.uint32(0x20))
            new_file.write(numpy.uint64(0))
            new_file.write(numpy.uint64(1))
            keys = list(DUMP.keys())
            strings_block = []
            for x in range(0, len(keys)):
                new_file.write(numpy.uint64(int(keys[x], base=10)))
                new_file.write(numpy.uint64(len(b"".join(strings_block))))
                strings_block.append(DUMP[keys[x]].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
            new_file.write(b"".join(strings_block))
            new_file.close()
        case "strings\\selecter.json":
            new_file = open("new_database\\selecter.dat", "wb")
            old_file = open("database\\selecter.dat", "rb")
            new_file.write(numpy.uint32(len(DUMP)))
            new_file.write(numpy.uint32(0x38))
            new_file.write(numpy.uint32(0x8 + 0x50 + (0x38 * len(DUMP))))
            new_file.write(numpy.uint32(0x50))
            old_file.seek(0x10)
            new_file.write(old_file.read(0x40))
            keys = list(DUMP.keys())
            strings_block = []
            for x in range(0, len(keys)):
                new_file.write(numpy.uint32(int(keys[x], base=10)))
                old_file.seek(new_file.tell())
                new_file.write(old_file.read(0x4))
                new_file.write(numpy.uint32(len(b"".join(strings_block))))
                old_file.seek(new_file.tell())
                new_file.write(old_file.read(0x2C))
                strings_block.append(DUMP[keys[x]].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
            new_file.write(numpy.uint64(0))
            old_file.close()
            new_file.write(b"".join(strings_block))
            new_file.close()
        case "strings\\selectinfo.json":
            new_file = open("new_database\\selectinfo.dat", "wb")
            old_file = open("database\\selectinfo.dat", "rb")
            new_file.write(numpy.uint32(len(DUMP)))
            new_file.write(numpy.uint32(0x28))
            new_file.write(numpy.uint32(0x8 + 0x40 + (0x28 * len(DUMP))))
            new_file.write(numpy.uint32(0x40))
            old_file.seek(0x10)
            new_file.write(old_file.read(0x30))
            keys = list(DUMP.keys())
            strings_block = []
            for x in range(0, len(keys)):
                new_file.write(numpy.uint32(int(keys[x], base=10)))
                old_file.seek(new_file.tell())
                new_file.write(old_file.read(0xC))
                new_file.write(numpy.uint32(len(b"".join(strings_block))))
                old_file.seek(new_file.tell())
                new_file.write(old_file.read(0x14))
                strings_block.append(DUMP[keys[x]].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
            new_file.write(numpy.uint64(0))
            old_file.close()
            new_file.write(b"".join(strings_block))
            new_file.close()
        case "strings\\soundbgm.json":
            new_file = open("new_database\\soundbgm.dat", "wb")
            old_file = open("database\\soundbgm.dat", "rb")
            new_file.write(numpy.uint32(len(DUMP)))
            new_file.write(numpy.uint32(0x40))
            new_file.write(numpy.uint32(0x50 + (0x40 * len(DUMP))))
            new_file.write(numpy.uint32(0x50))
            old_file.seek(0x10)
            new_file.write(old_file.read(0x40))
            keys = list(DUMP.keys())
            strings_block = []
            for x in range(0, len(keys)):
                new_file.write(numpy.uint32(int(keys[x], base=10)))
                old_file.seek(new_file.tell())
                new_file.write(old_file.read(0xC))
                new_file.write(numpy.uint32(len(b"".join(strings_block))))
                old_file.seek(new_file.tell())
                new_file.write(old_file.read(0xC))
                strings_block.append(DUMP[keys[x]]["Type"].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
                new_file.write(numpy.uint64(len(b"".join(strings_block))))
                strings_block.append(DUMP[keys[x]]["String1"].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
                new_file.write(numpy.uint64(len(b"".join(strings_block))))
                strings_block.append(DUMP[keys[x]]["String2"].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
                new_file.write(numpy.uint64(len(b"".join(strings_block))))
                strings_block.append(DUMP[keys[x]]["String3"].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
                new_file.write(numpy.uint64(len(b"".join(strings_block))))
                strings_block.append(DUMP[keys[x]]["String4"].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
            old_file.close()
            new_file.write(b"".join(strings_block))
            new_file.close()
        case "strings\\soundse.json":
            new_file = open("new_database\\soundse.dat", "wb")
            old_file = open("database\\soundse.dat", "rb")
            new_file.write(numpy.uint32(len(DUMP)))
            new_file.write(numpy.uint32(0x40))
            new_file.write(numpy.uint32(0x50 + (0x40 * len(DUMP))))
            new_file.write(numpy.uint32(0x50))
            old_file.seek(0x10)
            new_file.write(old_file.read(0x40))
            keys = list(DUMP.keys())
            strings_block = []
            for x in range(0, len(keys)):
                new_file.write(numpy.uint32(int(keys[x], base=10)))
                old_file.seek(new_file.tell())
                new_file.write(old_file.read(0xC))
                new_file.write(numpy.uint32(len(b"".join(strings_block))))
                old_file.seek(new_file.tell())
                new_file.write(old_file.read(0xC))
                strings_block.append(DUMP[keys[x]]["Type"].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
                new_file.write(numpy.uint64(len(b"".join(strings_block))))
                strings_block.append(DUMP[keys[x]]["String1"].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
                new_file.write(numpy.uint64(len(b"".join(strings_block))))
                strings_block.append(DUMP[keys[x]]["String2"].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
                new_file.write(numpy.uint64(len(b"".join(strings_block))))
                strings_block.append(DUMP[keys[x]]["String3"].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
                new_file.write(numpy.uint64(len(b"".join(strings_block))))
                strings_block.append(DUMP[keys[x]]["String4"].encode("UTF-8"))
                strings_block.append(numpy.uint32(0))
            old_file.close()
            new_file.write(b"".join(strings_block))
            new_file.close()

for i in range(0, len(exceptions)):
    shutil.copyfile(exceptions[i], "new_database\\%s" % os.path.basename(exceptions[i]))